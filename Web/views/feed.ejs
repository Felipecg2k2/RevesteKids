<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title><%= title %></title>
    
    <link rel="stylesheet" href="/css/feed.css">
    
    <link rel="stylesheet" href="/css/sidebar.css">
    
    </head>
<body>
    
    <div class="app-layout">
        
        <%- include('partials/_sidebar') %>
        
        <div class="content-area">
            
            

            <div class="feed-content-and-filters">
                
                <div class="filters-column">
                    <h2>Filtros</h2>
                    
                    <div class="filter-group">
                        <p>Gênero</p>
                        <input type="checkbox" id="feminino" name="genero" value="Feminino" />
                        <label for="feminino">Feminino</label><br />
                        <input type="checkbox" id="masculino" name="genero" value="Masculino" />
                        <label for="masculino">Masculino</label><br />
                        <input type="checkbox" id="unissex" name="genero" value="Unissex" />
                        <label for="unissex">Unissex</label><br />
                    </div>

                    <div class="filter-group">
                        <p>Tamanho</p>
                        <div class="button-group">
                            <button class="filter-button" data-filter-type="tamanho" data-value="0-3">0-3</button>
                            <button class="filter-button" data-filter-type="tamanho" data-value="3-6">3-6</button>
                            <button class="filter-button" data-filter-type="tamanho" data-value="6+">6+</button>
                            <button class="filter-button" data-filter-type="tamanho" data-value="1-2">1-2</button>
                            <button class="filter-button" data-filter-type="tamanho" data-value="2-3">2-3</button>
                            <button class="filter-button" data-filter-type="tamanho" data-value="3-4">3-4</button>
                        </div>
                    </div>

                    <div class="filter-group">
                        <p>Tipo de Peça</p>
                        <div class="button-group">
                            <button class="filter-button" data-filter-type="peca" data-value="Camiseta">Camiseta</button>
                            <button class="filter-button" data-filter-type="peca" data-value="Calça">Calça</button>
                            <button class="filter-button" data-filter-type="peca" data-value="Vestido">Vestido</button>
                            <button class="filter-button" data-filter-type="peca" data-value="Suéter">Suéter</button>
                            <button class="filter-button" data-filter-type="peca" data-value="Tênis">Tênis</button>
                            <button class="filter-button" data-filter-type="peca" data-value="Shorts">Shorts</button>
                        </div>
                    </div>

                </div>

                <div id="swipe-container">
                    
                    <% if (pecasDisponiveis.length === 0) { %>
                    <p style="width: 100%; text-align: center">
                        Parece que não há novas peças no catálogo por enquanto!
                    </p>
                    <% } %> 
                    
                    <% pecasDisponiveis.forEach((item, index) => { %>
                    <div
                        class="card-item"
                        data-id="<%= item.id %>"
                        data-index="<%= index %>"
                    >
                        <h2><%= item.peca %></h2>
                        <div style="height: 250px; background-color: #f0f0f0; display: flex; justify-content: center; align-items: center; border-radius: 8px;">
                            [IMAGEM AQUI - <%= item.peca %>]
                        </div>

                        <p>
                            <strong>Dono:</strong> <%= item.usuario.nome %> 
                            </p>
                        <p><strong>Gênero:</strong> <%= item.genero %></p>
                        <p><strong>Tamanho:</strong> <%= item.tamanho %></p>
                        <p><strong>Condição:</strong> <%= item.condicao %></p>

                        
</div>
                    <% }); %>

                    
<div class="global-card-actions">
                        <button
                            class="action-button btn-ignorar"
                            id="global-btn-ignorar"
                        >
                            <span class="icon">❌</span>
                        </button>

                        <button
                            class="action-button btn-voltar inactive" 
                            id="global-btn-voltar"
                        >
                            <span class="icon">↩️</span>
                        </button>

                        <a
                            href="#" 
                            class="action-button btn-trocar"
                            id="global-btn-trocar"
                        >
                            <span class="icon">✅</span>
                        </a>
                    </div>
                    
</div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const cardContainer = document.getElementById('swipe-container');
            const cards = document.querySelectorAll('.card-item'); 
            let currentIndex = 0; 

            // Referências aos botões globais
            const globalBtnIgnorar = document.getElementById('global-btn-ignorar');
            const globalBtnVoltar = document.getElementById('global-btn-voltar');
            const globalBtnTrocar = document.getElementById('global-btn-trocar');


            // Função para mostrar apenas a carta atual e ajustar o botão 'Voltar'
            function updateCardDisplay() {
                cards.forEach((card, index) => {
                    card.style.display = 'none';
                    
                    if (index === currentIndex) {
                        card.style.display = 'block';
                    }
                });

                // >>> MODIFICAÇÃO CHAVE AQUI <<<
                if (globalBtnVoltar) {
                    // Garante que o botão 'Voltar' está sempre visível
                    globalBtnVoltar.style.display = 'inline-flex'; 
                    
                    if (currentIndex === 0) {
                        // Desativa (coloca em 'off') na primeira peça
                        globalBtnVoltar.classList.add('inactive');
                    } else {
                        // Ativa (remove o 'off') a partir da segunda peça
                        globalBtnVoltar.classList.remove('inactive');
                    }
                }
                // >>> FIM DA MODIFICAÇÃO CHAVE <<<


                // Fim do Catálogo
                if (currentIndex >= cards.length) {
                    cardContainer.innerHTML = '<p style="width: 100%; text-align: center; padding: 50px;">Você viu todas as peças do catálogo! Volte mais tarde.</p>';
                    // Esconde os botões de ação quando não há mais cards
                    if (globalBtnIgnorar) globalBtnIgnorar.style.display = 'none';
                    if (globalBtnVoltar) globalBtnVoltar.style.display = 'none';
                    if (globalBtnTrocar) globalBtnTrocar.style.display = 'none';
                } else {
                     // Garante que os botões de ação estejam visíveis quando há cards
                    if (globalBtnIgnorar) globalBtnIgnorar.style.display = 'inline-flex';
                    // globalBtnVoltar é ajustado acima
                    if (globalBtnTrocar) globalBtnTrocar.style.display = 'inline-flex';
                    
                    // Atualiza o link do botão Trocar com o ID da peça atual
                    if (globalBtnTrocar && cards[currentIndex]) {
                        const currentItemId = cards[currentIndex].dataset.id;
                        globalBtnTrocar.href = `/trocas/propor/${currentItemId}`;
                    }
                }
            }

            // 1. Lógica para Avançar: Ignorar ou Trocar (avança o índice)
            function setupActionButtons() {
                // Remove listeners antigos para evitar duplicação (boa prática)
                if (globalBtnIgnorar) globalBtnIgnorar.removeEventListener('click', handleNextCard);
                if (globalBtnVoltar) globalBtnVoltar.removeEventListener('click', handlePrevCard);
                if (globalBtnTrocar) globalBtnTrocar.removeEventListener('click', handleNextCard); // Trocar também avança

                // Adiciona listeners aos botões globais
                if (globalBtnIgnorar) globalBtnIgnorar.addEventListener('click', handleNextCard);
                if (globalBtnVoltar) globalBtnVoltar.addEventListener('click', handlePrevCard);
                if (globalBtnTrocar) globalBtnTrocar.addEventListener('click', handleNextCard); // Trocar também avança
                
                // Seleciona todos os botões de filtro
                document.querySelectorAll('.filter-button').forEach(button => {
                    button.addEventListener('click', toggleFilter);
                });
            }
            
            // Handler para Avançar
            function handleNextCard(event) {
                // Impedir a navegação padrão do link 'Propor Troca' para que o JS gerencie
                if (event.currentTarget.id === 'global-btn-trocar') {
                    event.preventDefault(); 
                    // Em uma aplicação real, você faria a chamada AJAX ou redirecionamento aqui
                    const currentItemId = cards[currentIndex].dataset.id;
                    window.location.href = `/trocas/propor/${currentItemId}`; // Redireciona após avançar
                }

                if (event.currentTarget.id === 'global-btn-ignorar') {
                     // Aqui você pode adicionar uma chamada AJAX para registrar a ação de ignorar, se desejar.
                }
                
                currentIndex++;
                updateCardDisplay();
            }
            
            // Handler para Voltar
            function handlePrevCard(event) {
                // O CSS 'pointer-events: none;' na classe 'inactive' impedirá o clique,
                // mas é bom ter uma verificação no JS também.
                if (currentIndex > 0) {
                    currentIndex--;
                    updateCardDisplay();
                    // Aqui você pode adicionar uma chamada AJAX para registrar o "desfazer" de ignorar, se desejar.
                }
            }

            // NOVO: Lógica de clique para os botões de filtro (simples toggle visual)
            function toggleFilter(event) {
                const button = event.currentTarget;
                // Alterna a classe 'active' para indicar se o filtro está selecionado
                button.classList.toggle('active');
            }

            // Inicializa a exibição e os listeners
            if (cards.length > 0) {
                updateCardDisplay(); 
                setupActionButtons(); // Adiciona os listeners
            } else {
                 // Se não houver cards, esconde os botões de ação desde o início
                if (globalBtnIgnorar) globalBtnIgnorar.style.display = 'none';
                if (globalBtnVoltar) globalBtnVoltar.style.display = 'none';
                if (globalBtnTrocar) globalBtnTrocar.style.display = 'none';
            }
            
            // NOVO: Adiciona listener para checkboxes de Gênero, apenas para fins de estado/feedback visual
            document.querySelectorAll('input[name="genero"]').forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    // Lógica para filtros aqui.
                });
            });

        });
    </script>
</body>
</html>